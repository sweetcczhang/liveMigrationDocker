/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_netdev_2eproto__INCLUDED
#define PROTOBUF_C_netdev_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "opts.pb-c.h"
#include "tun.pb-c.h"
#include "sysctl.pb-c.h"

typedef struct _NetDeviceEntry NetDeviceEntry;
typedef struct _NetnsEntry NetnsEntry;


/* --- enums --- */

typedef enum _NdType {
  ND_TYPE__LOOPBACK = 1,
  ND_TYPE__VETH = 2,
  ND_TYPE__TUN = 3,
  ND_TYPE__EXTLINK = 4,
  ND_TYPE__VENET = 5,
  ND_TYPE__BRIDGE = 6
} NdType;

/* --- messages --- */

struct  _NetDeviceEntry
{
  ProtobufCMessage base;
  NdType type;
  uint32_t ifindex;
  uint32_t mtu;
  uint32_t flags;
  char *name;
  TunLinkEntry *tun;
  protobuf_c_boolean has_address;
  ProtobufCBinaryData address;
  size_t n_conf;
  int32_t *conf;
  size_t n_conf4;
  SysctlEntry **conf4;
  size_t n_conf6;
  SysctlEntry **conf6;
};
#define NET_DEVICE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&net_device_entry__descriptor) \
    , 0, 0, 0, 0, NULL, NULL, 0,{0,NULL}, 0,NULL, 0,NULL, 0,NULL }


struct  _NetnsEntry
{
  ProtobufCMessage base;
  size_t n_def_conf;
  int32_t *def_conf;
  size_t n_all_conf;
  int32_t *all_conf;
  size_t n_def_conf4;
  SysctlEntry **def_conf4;
  size_t n_all_conf4;
  SysctlEntry **all_conf4;
  size_t n_def_conf6;
  SysctlEntry **def_conf6;
  size_t n_all_conf6;
  SysctlEntry **all_conf6;
};
#define NETNS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&netns_entry__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* NetDeviceEntry methods */
void   net_device_entry__init
                     (NetDeviceEntry         *message);
size_t net_device_entry__get_packed_size
                     (const NetDeviceEntry   *message);
size_t net_device_entry__pack
                     (const NetDeviceEntry   *message,
                      uint8_t             *out);
size_t net_device_entry__pack_to_buffer
                     (const NetDeviceEntry   *message,
                      ProtobufCBuffer     *buffer);
NetDeviceEntry *
       net_device_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   net_device_entry__free_unpacked
                     (NetDeviceEntry *message,
                      ProtobufCAllocator *allocator);
/* NetnsEntry methods */
void   netns_entry__init
                     (NetnsEntry         *message);
size_t netns_entry__get_packed_size
                     (const NetnsEntry   *message);
size_t netns_entry__pack
                     (const NetnsEntry   *message,
                      uint8_t             *out);
size_t netns_entry__pack_to_buffer
                     (const NetnsEntry   *message,
                      ProtobufCBuffer     *buffer);
NetnsEntry *
       netns_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   netns_entry__free_unpacked
                     (NetnsEntry *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NetDeviceEntry_Closure)
                 (const NetDeviceEntry *message,
                  void *closure_data);
typedef void (*NetnsEntry_Closure)
                 (const NetnsEntry *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    nd_type__descriptor;
extern const ProtobufCMessageDescriptor net_device_entry__descriptor;
extern const ProtobufCMessageDescriptor netns_entry__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_netdev_2eproto__INCLUDED */
