/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_sk_2dinet_2eproto__INCLUDED
#define PROTOBUF_C_sk_2dinet_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "opts.pb-c.h"
#include "fown.pb-c.h"
#include "sk-opts.pb-c.h"

typedef struct _IpOptsEntry IpOptsEntry;
typedef struct _InetSkEntry InetSkEntry;


/* --- enums --- */


/* --- messages --- */

struct  _IpOptsEntry
{
  ProtobufCMessage base;
  protobuf_c_boolean has_freebind;
  protobuf_c_boolean freebind;
};
#define IP_OPTS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ip_opts_entry__descriptor) \
    , 0,0 }


struct  _InetSkEntry
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t ino;
  uint32_t family;
  uint32_t type;
  uint32_t proto;
  uint32_t state;
  uint32_t src_port;
  uint32_t dst_port;
  uint32_t flags;
  uint32_t backlog;
  size_t n_src_addr;
  uint32_t *src_addr;
  size_t n_dst_addr;
  uint32_t *dst_addr;
  FownEntry *fown;
  SkOptsEntry *opts;
  protobuf_c_boolean has_v6only;
  protobuf_c_boolean v6only;
  IpOptsEntry *ip_opts;
  char *ifname;
};
#define INET_SK_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&inet_sk_entry__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, NULL, NULL, 0,0, NULL, NULL }


/* IpOptsEntry methods */
void   ip_opts_entry__init
                     (IpOptsEntry         *message);
size_t ip_opts_entry__get_packed_size
                     (const IpOptsEntry   *message);
size_t ip_opts_entry__pack
                     (const IpOptsEntry   *message,
                      uint8_t             *out);
size_t ip_opts_entry__pack_to_buffer
                     (const IpOptsEntry   *message,
                      ProtobufCBuffer     *buffer);
IpOptsEntry *
       ip_opts_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ip_opts_entry__free_unpacked
                     (IpOptsEntry *message,
                      ProtobufCAllocator *allocator);
/* InetSkEntry methods */
void   inet_sk_entry__init
                     (InetSkEntry         *message);
size_t inet_sk_entry__get_packed_size
                     (const InetSkEntry   *message);
size_t inet_sk_entry__pack
                     (const InetSkEntry   *message,
                      uint8_t             *out);
size_t inet_sk_entry__pack_to_buffer
                     (const InetSkEntry   *message,
                      ProtobufCBuffer     *buffer);
InetSkEntry *
       inet_sk_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   inet_sk_entry__free_unpacked
                     (InetSkEntry *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*IpOptsEntry_Closure)
                 (const IpOptsEntry *message,
                  void *closure_data);
typedef void (*InetSkEntry_Closure)
                 (const InetSkEntry *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ip_opts_entry__descriptor;
extern const ProtobufCMessageDescriptor inet_sk_entry__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_sk_2dinet_2eproto__INCLUDED */
