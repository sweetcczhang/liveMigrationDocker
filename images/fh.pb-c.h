/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_fh_2eproto__INCLUDED
#define PROTOBUF_C_fh_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "opts.pb-c.h"

typedef struct _FhEntry FhEntry;
typedef struct _IrmapCacheEntry IrmapCacheEntry;


/* --- enums --- */

typedef enum _FhEntrySizes {
  FH_ENTRY_SIZES__min_entries = 16
} FhEntrySizes;

/* --- messages --- */

struct  _FhEntry
{
  ProtobufCMessage base;
  uint32_t bytes;
  uint32_t type;
  size_t n_handle;
  uint64_t *handle;
  char *path;
  protobuf_c_boolean has_mnt_id;
  uint32_t mnt_id;
};
#define FH_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fh_entry__descriptor) \
    , 0, 0, 0,NULL, NULL, 0,0 }


struct  _IrmapCacheEntry
{
  ProtobufCMessage base;
  uint32_t dev;
  uint64_t inode;
  char *path;
};
#define IRMAP_CACHE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&irmap_cache_entry__descriptor) \
    , 0, 0, NULL }


/* FhEntry methods */
void   fh_entry__init
                     (FhEntry         *message);
size_t fh_entry__get_packed_size
                     (const FhEntry   *message);
size_t fh_entry__pack
                     (const FhEntry   *message,
                      uint8_t             *out);
size_t fh_entry__pack_to_buffer
                     (const FhEntry   *message,
                      ProtobufCBuffer     *buffer);
FhEntry *
       fh_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fh_entry__free_unpacked
                     (FhEntry *message,
                      ProtobufCAllocator *allocator);
/* IrmapCacheEntry methods */
void   irmap_cache_entry__init
                     (IrmapCacheEntry         *message);
size_t irmap_cache_entry__get_packed_size
                     (const IrmapCacheEntry   *message);
size_t irmap_cache_entry__pack
                     (const IrmapCacheEntry   *message,
                      uint8_t             *out);
size_t irmap_cache_entry__pack_to_buffer
                     (const IrmapCacheEntry   *message,
                      ProtobufCBuffer     *buffer);
IrmapCacheEntry *
       irmap_cache_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   irmap_cache_entry__free_unpacked
                     (IrmapCacheEntry *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*FhEntry_Closure)
                 (const FhEntry *message,
                  void *closure_data);
typedef void (*IrmapCacheEntry_Closure)
                 (const IrmapCacheEntry *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    fh_entry_sizes__descriptor;
extern const ProtobufCMessageDescriptor fh_entry__descriptor;
extern const ProtobufCMessageDescriptor irmap_cache_entry__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_fh_2eproto__INCLUDED */
